name: release

on:
  workflow_dispatch:
    branches: [main]

jobs:
  build:
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "16"
      - name: Install Apple Arch
        uses: actions-rs/toolchain@v1
        if: matrix.os == 'macos-latest'
        with:
          toolchain: stable
          override: true
          target: aarch64-apple-darwin
          components: rustfmt, clippy
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: npm install
      - name: Extract version
        id: ver
        uses: Saionaro/extract-package-version@v1.0.6
      - name: Build Webpack
        run: npm run prod
      - name: Build Electron for Windows
        if: matrix.os == 'windows-latest'
        run: npm run make -- --windows
      - name: Build Electron for macOS
        if: matrix.os == 'macos-latest'
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: npm run make -- --macos --x64
      - name: Build Webpack for Apple Silicon
        if: matrix.os == 'macos-latest'
        run: npm run prod-apple-darwin
      - name: Build Electron for macOS Apple Silicon
        if: matrix.os == 'macos-latest'
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: npm run make -- --macos --arm64
      - name: Build Electron for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run make -- --linux
      - name: Upload Artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: art
          retention-days: 1
          path: package/Epherome-${{ steps.ver.outputs.version }}.exe
      - name: Upload Artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: art
          retention-days: 1
          path: |
            package/Epherome-${{ steps.ver.outputs.version }}-arm64.dmg
            package/Epherome-${{ steps.ver.outputs.version }}-x64.dmg
      - name: Upload Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: art
          retention-days: 1
          path: |
            package/Epherome-${{ steps.ver.outputs.version }}.tar.gz
            package/Epherome-${{ steps.ver.outputs.version }}.deb
            package/Epherome-${{ steps.ver.outputs.version }}.rpm
            package/Epherome-${{ steps.ver.outputs.version }}.snap
  release:
    needs: [build]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "16"
      - name: Get Artifacts
        uses: actions/download-artifact@v2
        with:
          name: art
          path: package
      - name: Extract version
        id: ver
        uses: Saionaro/extract-package-version@v1.0.6
      - name: Run Post Release Script
        run: node scripts/post-release.js
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.ver.outputs.version }}
          name: Epherome Beta ${{ steps.ver.outputs.version }}
          draft: true
          prerelease: true
          files: |
            package/Epherome-${{ steps.ver.outputs.version }}.exe
            package/Epherome-${{ steps.ver.outputs.version }}.exe.hash
            package/Epherome-${{ steps.ver.outputs.version }}-arm64.dmg
            package/Epherome-${{ steps.ver.outputs.version }}-arm64.dmg.hash
            package/Epherome-${{ steps.ver.outputs.version }}-x64.dmg
            package/Epherome-${{ steps.ver.outputs.version }}-x64.dmg.hash
            package/Epherome-${{ steps.ver.outputs.version }}.tar.gz
            package/Epherome-${{ steps.ver.outputs.version }}.tar.gz.hash
            package/Epherome-${{ steps.ver.outputs.version }}.deb
            package/Epherome-${{ steps.ver.outputs.version }}.deb.hash
            package/Epherome-${{ steps.ver.outputs.version }}.rpm
            package/Epherome-${{ steps.ver.outputs.version }}.rpm.hash
            package/Epherome-${{ steps.ver.outputs.version }}.snap
            package/Epherome-${{ steps.ver.outputs.version }}.snap.hash
      - name: Update Data on Official Site
        run: curl -d '{"version":"${{ steps.ver.outputs.version }}", "token":"${{ secrets.SITE_ADMIN_TOKEN }}"}' -H 'Content-Type:application/json' -X PUT https://api.epherome.com/admin/version
